@page "/calculator"
@inject IDialogService DialogService

<PageTitle>Kiszámoló</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Kiszámoló</MudText>

<MudCarousel @ref="carousel" Class="mud-width-full" Style="height:350px;" ShowArrows="true"
    ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">

@for (int i = 0; i < questions.Count; i++) {
    var j = i;
    var question = questions[j];
    var isPrimary = j % 2 == 0;
    var isLast = j == questions.Count - 1;
    var buttonText = isLast ? "Kész, lássuk az eredményt" : "Kész, jöhet a következő!";

    <MudCarouselItem Transition="Transition.Slide" Color="isPrimary ? Color.Primary : Color.Secondary">
        <div class="d-flex" style="justify-content: center; height: '90%'; width: '100%';">
            <MudCard Class="ma-5 object-fill">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@question.Title</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Tertiary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">@question.Question</MudText>
                    <MudNumericField Class="mt-5" @bind-Value="@question.Answer" Label="Válasz" HideSpinButtons="true" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary"
                        OnClick="() => NextQuestion(j)">@buttonText</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
    </MudCarouselItem>
}
</MudCarousel>

@code {
    record CalculatorItem {
        public string? Title { get; init; }

        public string? Question { get; init; }

        public decimal? Answer { get; set; }

        public decimal ExpectedAnswer { get; init; }
    }

    private MudCarousel<object>? carousel;
    private List<CalculatorItem> questions = new List<CalculatorItem>();

    protected override void OnInitialized()
    {
        questions.Add(new CalculatorItem
        {
            Title = "1. kérdés",
            Question = "18 + 22 =",
            ExpectedAnswer = 40
        });
        questions.Add(new CalculatorItem
        {
            Title = "2. kérdés",
            Question = "39 + 11 =",
            ExpectedAnswer = 50
        });
        questions.Add(new CalculatorItem
        {
            Title = "3. kérdés",
            Question = "16 + 24 =",
            ExpectedAnswer = 40
        });
        questions.Add(new CalculatorItem
        {
            Title = "4. kérdés",
            Question = "39 + 39 =",
            ExpectedAnswer = 78
        });
        questions.Add(new CalculatorItem
        {
            Title = "5. kérdés",
            Question = "47 + 32 =",
            ExpectedAnswer = 79
        });
        questions.Add(new CalculatorItem
        {
            Title = "6. kérdés",
            Question = "16 – 8 =",
            ExpectedAnswer = 8
        });
        questions.Add(new CalculatorItem
        {
            Title = "7. kérdés",
            Question = "39 – 6 – 3 =",
            ExpectedAnswer = 30
        });
        questions.Add(new CalculatorItem
        {
            Title = "8. kérdés",
            Question = "47 – 27 =",
            ExpectedAnswer = 20
        });
        questions.Add(new CalculatorItem
        {
            Title = "9. kérdés",
            Question = "63 – 18 =",
            ExpectedAnswer = 45
        });
        questions.Add(new CalculatorItem
        {
            Title = "10. kérdés",
            Question = "24 : 4 =",
            ExpectedAnswer = 6
        });
        questions.Add(new CalculatorItem
        {
            Title = "11. kérdés",
            Question = "6 · 6 =",
            ExpectedAnswer = 36
        });
        questions.Add(new CalculatorItem
        {
            Title = "12. kérdés",
            Question = "9 · 9 =",
            ExpectedAnswer = 81
        });
        questions.Add(new CalculatorItem
        {
            Title = "13. kérdés",
            Question = "7 · 4 =",
            ExpectedAnswer = 28
        });
        questions.Add(new CalculatorItem
        {
            Title = "14. kérdés",
            Question = "8 · 6 =",
            ExpectedAnswer = 48
        });
        questions.Add(new CalculatorItem
        {
            Title = "15. kérdés",
            Question = "5 · 5 · 4 =",
            ExpectedAnswer = 100
        });
        questions.Add(new CalculatorItem
        {
            Title = "16. kérdés",
            Question = "18 : 6 =",
            ExpectedAnswer = 3
        });
        questions.Add(new CalculatorItem
        {
            Title = "17. kérdés",
            Question = "96 : 8 =",
            ExpectedAnswer = 12
        });
        questions.Add(new CalculatorItem
        {
            Title = "18. kérdés",
            Question = "16 : 4 =",
            ExpectedAnswer = 4
        });
        questions.Add(new CalculatorItem
        {
            Title = "19. kérdés",
            Question = "95 : 5 =",
            ExpectedAnswer = 19
        });
        questions.Add(new CalculatorItem
        {
            Title = "20. kérdés",
            Question = "94 – 64 + 8 – 32 + 4 =",
            ExpectedAnswer = 10
        });
    }

    private void NextQuestion(int question)
    {
        if (question == questions.Count - 1)
        {
            var correctAnswers = questions.Count(q => q.Answer == q.ExpectedAnswer);
            var totalAnswers = questions.Count;
            var percentage = (decimal)correctAnswers / totalAnswers * 100m;
            var message = $"Helyes válaszok: {correctAnswers} / {totalAnswers} ({percentage}%)";

            var parameters = new DialogParameters<ResultDialog>();
            parameters.Add("Content", message);

            var options = new DialogOptions { CloseOnEscapeKey = true };
            DialogService.Show<ResultDialog>("Végeredmény", parameters, options);
        }
        else
        {
            carousel?.Next();
        }
    }
}
